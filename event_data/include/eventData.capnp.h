// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: eventData.capnp

#ifndef CAPNP_INCLUDED_f79c074e0ae359d2_
#define CAPNP_INCLUDED_f79c074e0ae359d2_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(805a6866f9e2837c);
CAPNP_DECLARE_SCHEMA(fc419c33adf860e0);
CAPNP_DECLARE_SCHEMA(b65c19b8c639b6c7);

}  // namespace schemas
}  // namespace capnp


struct FlatbufEventData {
  FlatbufEventData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(805a6866f9e2837c, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct EventMessage {
  EventMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Message;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fc419c33adf860e0, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct EventMessage::Message {
  Message() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    NOTHING,
    DATA,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b65c19b8c639b6c7, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class FlatbufEventData::Reader {
public:
  typedef FlatbufEventData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getCount() const;

  inline bool hasDetId() const;
  inline  ::capnp::List< ::uint32_t>::Reader getDetId() const;

  inline bool hasTof() const;
  inline  ::capnp::List< ::uint64_t>::Reader getTof() const;

  inline  ::uint32_t getFrameNumber() const;

  inline  ::uint32_t getTotalFrames() const;

  inline  ::uint64_t getTotalCounts() const;

  inline bool getFrameEnd() const;

  inline bool getRunEnd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FlatbufEventData::Builder {
public:
  typedef FlatbufEventData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getCount();
  inline void setCount( ::uint32_t value);

  inline bool hasDetId();
  inline  ::capnp::List< ::uint32_t>::Builder getDetId();
  inline void setDetId( ::capnp::List< ::uint32_t>::Reader value);
  inline void setDetId(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t>::Builder initDetId(unsigned int size);
  inline void adoptDetId(::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> disownDetId();

  inline bool hasTof();
  inline  ::capnp::List< ::uint64_t>::Builder getTof();
  inline void setTof( ::capnp::List< ::uint64_t>::Reader value);
  inline void setTof(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t>::Builder initTof(unsigned int size);
  inline void adoptTof(::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> disownTof();

  inline  ::uint32_t getFrameNumber();
  inline void setFrameNumber( ::uint32_t value);

  inline  ::uint32_t getTotalFrames();
  inline void setTotalFrames( ::uint32_t value);

  inline  ::uint64_t getTotalCounts();
  inline void setTotalCounts( ::uint64_t value);

  inline bool getFrameEnd();
  inline void setFrameEnd(bool value);

  inline bool getRunEnd();
  inline void setRunEnd(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FlatbufEventData::Pipeline {
public:
  typedef FlatbufEventData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EventMessage::Reader {
public:
  typedef EventMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Message::Reader getMessage() const;

  inline  ::uint64_t getId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EventMessage::Builder {
public:
  typedef EventMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Message::Builder getMessage();
  inline Message::Builder initMessage();

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EventMessage::Pipeline {
public:
  typedef EventMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline Message::Pipeline getMessage();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EventMessage::Message::Reader {
public:
  typedef Message Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isNothing() const;
  inline  ::capnp::Void getNothing() const;

  inline bool isData() const;
  inline bool hasData() const;
  inline  ::FlatbufEventData::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EventMessage::Message::Builder {
public:
  typedef Message Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isNothing();
  inline  ::capnp::Void getNothing();
  inline void setNothing( ::capnp::Void value = ::capnp::VOID);

  inline bool isData();
  inline bool hasData();
  inline  ::FlatbufEventData::Builder getData();
  inline void setData( ::FlatbufEventData::Reader value);
  inline  ::FlatbufEventData::Builder initData();
  inline void adoptData(::capnp::Orphan< ::FlatbufEventData>&& value);
  inline ::capnp::Orphan< ::FlatbufEventData> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EventMessage::Message::Pipeline {
public:
  typedef Message Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint32_t FlatbufEventData::Reader::getCount() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t FlatbufEventData::Builder::getCount() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void FlatbufEventData::Builder::setCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool FlatbufEventData::Reader::hasDetId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool FlatbufEventData::Builder::hasDetId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t>::Reader FlatbufEventData::Reader::getDetId() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t>::Builder FlatbufEventData::Builder::getDetId() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void FlatbufEventData::Builder::setDetId( ::capnp::List< ::uint32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void FlatbufEventData::Builder::setDetId(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t>::Builder FlatbufEventData::Builder::initDetId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void FlatbufEventData::Builder::adoptDetId(
    ::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> FlatbufEventData::Builder::disownDetId() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool FlatbufEventData::Reader::hasTof() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool FlatbufEventData::Builder::hasTof() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t>::Reader FlatbufEventData::Reader::getTof() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t>::Builder FlatbufEventData::Builder::getTof() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void FlatbufEventData::Builder::setTof( ::capnp::List< ::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void FlatbufEventData::Builder::setTof(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t>::Builder FlatbufEventData::Builder::initTof(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void FlatbufEventData::Builder::adoptTof(
    ::capnp::Orphan< ::capnp::List< ::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t>> FlatbufEventData::Builder::disownTof() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::uint32_t FlatbufEventData::Reader::getFrameNumber() const {
  return _reader.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint32_t FlatbufEventData::Builder::getFrameNumber() {
  return _builder.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void FlatbufEventData::Builder::setFrameNumber( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t FlatbufEventData::Reader::getTotalFrames() const {
  return _reader.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint32_t FlatbufEventData::Builder::getTotalFrames() {
  return _builder.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void FlatbufEventData::Builder::setTotalFrames( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t FlatbufEventData::Reader::getTotalCounts() const {
  return _reader.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint64_t FlatbufEventData::Builder::getTotalCounts() {
  return _builder.getDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS);
}
inline void FlatbufEventData::Builder::setTotalCounts( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool FlatbufEventData::Reader::getFrameEnd() const {
  return _reader.getDataField<bool>(
      96 * ::capnp::ELEMENTS);
}

inline bool FlatbufEventData::Builder::getFrameEnd() {
  return _builder.getDataField<bool>(
      96 * ::capnp::ELEMENTS);
}
inline void FlatbufEventData::Builder::setFrameEnd(bool value) {
  _builder.setDataField<bool>(
      96 * ::capnp::ELEMENTS, value);
}

inline bool FlatbufEventData::Reader::getRunEnd() const {
  return _reader.getDataField<bool>(
      97 * ::capnp::ELEMENTS);
}

inline bool FlatbufEventData::Builder::getRunEnd() {
  return _builder.getDataField<bool>(
      97 * ::capnp::ELEMENTS);
}
inline void FlatbufEventData::Builder::setRunEnd(bool value) {
  _builder.setDataField<bool>(
      97 * ::capnp::ELEMENTS, value);
}

inline EventMessage::Message::Reader EventMessage::Reader::getMessage() const {
  return EventMessage::Message::Reader(_reader);
}
inline EventMessage::Message::Builder EventMessage::Builder::getMessage() {
  return EventMessage::Message::Builder(_builder);
}
#if !CAPNP_LITE
inline EventMessage::Message::Pipeline EventMessage::Pipeline::getMessage() {
  return EventMessage::Message::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline EventMessage::Message::Builder EventMessage::Builder::initMessage() {
  _builder.setDataField< ::uint16_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  return EventMessage::Message::Builder(_builder);
}
inline  ::uint64_t EventMessage::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t EventMessage::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void EventMessage::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::EventMessage::Message::Which EventMessage::Message::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::EventMessage::Message::Which EventMessage::Message::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool EventMessage::Message::Reader::isNothing() const {
  return which() == EventMessage::Message::NOTHING;
}
inline bool EventMessage::Message::Builder::isNothing() {
  return which() == EventMessage::Message::NOTHING;
}
inline  ::capnp::Void EventMessage::Message::Reader::getNothing() const {
  KJ_IREQUIRE(which() == EventMessage::Message::NOTHING,
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}

inline  ::capnp::Void EventMessage::Message::Builder::getNothing() {
  KJ_IREQUIRE(which() == EventMessage::Message::NOTHING,
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS);
}
inline void EventMessage::Message::Builder::setNothing( ::capnp::Void value) {
  _builder.setDataField<EventMessage::Message::Which>(
      0 * ::capnp::ELEMENTS, EventMessage::Message::NOTHING);
  _builder.setDataField< ::capnp::Void>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool EventMessage::Message::Reader::isData() const {
  return which() == EventMessage::Message::DATA;
}
inline bool EventMessage::Message::Builder::isData() {
  return which() == EventMessage::Message::DATA;
}
inline bool EventMessage::Message::Reader::hasData() const {
  if (which() != EventMessage::Message::DATA) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool EventMessage::Message::Builder::hasData() {
  if (which() != EventMessage::Message::DATA) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::FlatbufEventData::Reader EventMessage::Message::Reader::getData() const {
  KJ_IREQUIRE(which() == EventMessage::Message::DATA,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::FlatbufEventData>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::FlatbufEventData::Builder EventMessage::Message::Builder::getData() {
  KJ_IREQUIRE(which() == EventMessage::Message::DATA,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::FlatbufEventData>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void EventMessage::Message::Builder::setData( ::FlatbufEventData::Reader value) {
  _builder.setDataField<EventMessage::Message::Which>(
      0 * ::capnp::ELEMENTS, EventMessage::Message::DATA);
  ::capnp::_::PointerHelpers< ::FlatbufEventData>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::FlatbufEventData::Builder EventMessage::Message::Builder::initData() {
  _builder.setDataField<EventMessage::Message::Which>(
      0 * ::capnp::ELEMENTS, EventMessage::Message::DATA);
  return ::capnp::_::PointerHelpers< ::FlatbufEventData>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void EventMessage::Message::Builder::adoptData(
    ::capnp::Orphan< ::FlatbufEventData>&& value) {
  _builder.setDataField<EventMessage::Message::Which>(
      0 * ::capnp::ELEMENTS, EventMessage::Message::DATA);
  ::capnp::_::PointerHelpers< ::FlatbufEventData>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::FlatbufEventData> EventMessage::Message::Builder::disownData() {
  KJ_IREQUIRE(which() == EventMessage::Message::DATA,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::FlatbufEventData>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_f79c074e0ae359d2_
