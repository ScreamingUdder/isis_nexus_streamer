// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_EVENTDATAFLATBUFFER_H_
#define FLATBUFFERS_GENERATED_EVENTDATAFLATBUFFER_H_

#include "flatbuffers/flatbuffers.h"



struct FlatbufEventData;
struct EventMessage;

enum MessageTypes {
  MessageTypes_NONE = 0,
  MessageTypes_FlatbufEventData = 1,
  MessageTypes_MIN = MessageTypes_NONE,
  MessageTypes_MAX = MessageTypes_FlatbufEventData
};

inline const char **EnumNamesMessageTypes() {
  static const char *names[] = { "NONE", "FlatbufEventData", nullptr };
  return names;
}

inline const char *EnumNameMessageTypes(MessageTypes e) { return EnumNamesMessageTypes()[static_cast<int>(e)]; }

inline bool VerifyMessageTypes(flatbuffers::Verifier &verifier, const void *union_obj, MessageTypes type);

struct FlatbufEventData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_COUNT = 4,
    VT_DETID = 6,
    VT_TOF = 8,
    VT_FRAMENUMBER = 10,
    VT_TOTALFRAMES = 12,
    VT_TOTALCOUNTS = 14,
    VT_FRAMEEND = 16,
    VT_RUNEND = 18
  };
  uint32_t count() const { return GetField<uint32_t>(VT_COUNT, 0); }
  const flatbuffers::Vector<uint32_t> *detId() const { return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_DETID); }
  const flatbuffers::Vector<uint64_t> *tof() const { return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_TOF); }
  uint32_t frameNumber() const { return GetField<uint32_t>(VT_FRAMENUMBER, 0); }
  uint32_t totalFrames() const { return GetField<uint32_t>(VT_TOTALFRAMES, 0); }
  uint64_t totalCounts() const { return GetField<uint64_t>(VT_TOTALCOUNTS, 0); }
  bool frameEnd() const { return GetField<uint8_t>(VT_FRAMEEND, 0) != 0; }
  bool runEnd() const { return GetField<uint8_t>(VT_RUNEND, 0) != 0; }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_COUNT) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DETID) &&
           verifier.Verify(detId()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TOF) &&
           verifier.Verify(tof()) &&
           VerifyField<uint32_t>(verifier, VT_FRAMENUMBER) &&
           VerifyField<uint32_t>(verifier, VT_TOTALFRAMES) &&
           VerifyField<uint64_t>(verifier, VT_TOTALCOUNTS) &&
           VerifyField<uint8_t>(verifier, VT_FRAMEEND) &&
           VerifyField<uint8_t>(verifier, VT_RUNEND) &&
           verifier.EndTable();
  }
};

struct FlatbufEventDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_count(uint32_t count) { fbb_.AddElement<uint32_t>(FlatbufEventData::VT_COUNT, count, 0); }
  void add_detId(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> detId) { fbb_.AddOffset(FlatbufEventData::VT_DETID, detId); }
  void add_tof(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> tof) { fbb_.AddOffset(FlatbufEventData::VT_TOF, tof); }
  void add_frameNumber(uint32_t frameNumber) { fbb_.AddElement<uint32_t>(FlatbufEventData::VT_FRAMENUMBER, frameNumber, 0); }
  void add_totalFrames(uint32_t totalFrames) { fbb_.AddElement<uint32_t>(FlatbufEventData::VT_TOTALFRAMES, totalFrames, 0); }
  void add_totalCounts(uint64_t totalCounts) { fbb_.AddElement<uint64_t>(FlatbufEventData::VT_TOTALCOUNTS, totalCounts, 0); }
  void add_frameEnd(bool frameEnd) { fbb_.AddElement<uint8_t>(FlatbufEventData::VT_FRAMEEND, static_cast<uint8_t>(frameEnd), 0); }
  void add_runEnd(bool runEnd) { fbb_.AddElement<uint8_t>(FlatbufEventData::VT_RUNEND, static_cast<uint8_t>(runEnd), 0); }
  FlatbufEventDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FlatbufEventDataBuilder &operator=(const FlatbufEventDataBuilder &);
  flatbuffers::Offset<FlatbufEventData> Finish() {
    auto o = flatbuffers::Offset<FlatbufEventData>(fbb_.EndTable(start_, 8));
    return o;
  }
};

inline flatbuffers::Offset<FlatbufEventData> CreateFlatbufEventData(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t count = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint32_t>> detId = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint64_t>> tof = 0,
   uint32_t frameNumber = 0,
   uint32_t totalFrames = 0,
   uint64_t totalCounts = 0,
   bool frameEnd = false,
   bool runEnd = false) {
  FlatbufEventDataBuilder builder_(_fbb);
  builder_.add_totalCounts(totalCounts);
  builder_.add_totalFrames(totalFrames);
  builder_.add_frameNumber(frameNumber);
  builder_.add_tof(tof);
  builder_.add_detId(detId);
  builder_.add_count(count);
  builder_.add_runEnd(runEnd);
  builder_.add_frameEnd(frameEnd);
  return builder_.Finish();
}

struct EventMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_MESSAGE_TYPE = 4,
    VT_MESSAGE = 6,
    VT_ID = 8
  };
  MessageTypes message_type() const { return static_cast<MessageTypes>(GetField<uint8_t>(VT_MESSAGE_TYPE, 0)); }
  const void *message() const { return GetPointer<const void *>(VT_MESSAGE); }
  uint64_t id() const { return GetField<uint64_t>(VT_ID, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MESSAGE_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_MESSAGE) &&
           VerifyMessageTypes(verifier, message(), message_type()) &&
           VerifyField<uint64_t>(verifier, VT_ID) &&
           verifier.EndTable();
  }
};

struct EventMessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_message_type(MessageTypes message_type) { fbb_.AddElement<uint8_t>(EventMessage::VT_MESSAGE_TYPE, static_cast<uint8_t>(message_type), 0); }
  void add_message(flatbuffers::Offset<void> message) { fbb_.AddOffset(EventMessage::VT_MESSAGE, message); }
  void add_id(uint64_t id) { fbb_.AddElement<uint64_t>(EventMessage::VT_ID, id, 0); }
  EventMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  EventMessageBuilder &operator=(const EventMessageBuilder &);
  flatbuffers::Offset<EventMessage> Finish() {
    auto o = flatbuffers::Offset<EventMessage>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<EventMessage> CreateEventMessage(flatbuffers::FlatBufferBuilder &_fbb,
   MessageTypes message_type = MessageTypes_NONE,
   flatbuffers::Offset<void> message = 0,
   uint64_t id = 0) {
  EventMessageBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_message(message);
  builder_.add_message_type(message_type);
  return builder_.Finish();
}

inline bool VerifyMessageTypes(flatbuffers::Verifier &verifier, const void *union_obj, MessageTypes type) {
  switch (type) {
    case MessageTypes_NONE: return true;
    case MessageTypes_FlatbufEventData: return verifier.VerifyTable(reinterpret_cast<const FlatbufEventData *>(union_obj));
    default: return false;
  }
}

inline const EventMessage *GetEventMessage(const void *buf) { return flatbuffers::GetRoot<EventMessage>(buf); }

inline bool VerifyEventMessageBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<EventMessage>(); }

inline void FinishEventMessageBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<EventMessage> root) { fbb.Finish(root); }


#endif  // FLATBUFFERS_GENERATED_EVENTDATAFLATBUFFER_H_
